require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(bnlearn, quietly = TRUE)
require(tidyr)
require(reshape2, quietly = TRUE)
library(knitr, quietly = TRUE)
library(reshape2, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(bnlearn, quietly = TRUE)
require(tidyr)
require(reshape2, quietly = TRUE)
library(knitr, quietly = TRUE)
library(reshape2, quietly = TRUE)
ler_dados = function(arquivo){
require("dplyr", warn.conflicts = FALSE)
file = read.csv(arquivo, stringsAsFactors = TRUE, encoding='UTF-8')
return (file)
}
df_alunos_cc = ler_dados("alunos_notas_simplif.csv")
View(df_alunos_cc)
df_alunos_cc = ler_dados("alunos_notas_simplif.csv")
View(df_alunos_cc)
testeleu = df_alunos_cc %>% group_by(Matricula, Periodo) %>% summarise(Nome_Disciplina = sum(Media_Int))
View(testeleu)
testeleu = df_alunos_cc %>% group_by(Matricula, Periodo) %>% summarise(Soma = sum(Media_Int))
View(testeleu)
testeleu = df_alunos_cc %>% group_by(Matricula, Periodo)
testeleu = df_alunos_cc %>% group_by(Matricula, Periodo) %>% summarise(P1 = sum(P1))
View(testeleu)
?summarise_all
abaco = df_alunos_cc %>% group_by(Matricula, Periodo) %>% summarise_all(funs(sum))
?summarise_at
abaco = df_alunos_cc %>% group_by(Matricula, Periodo) %>%
summarise_at(c("P1", "P2", "LP1", "LP2", "Discreta", "Eda", "Leda", "GI", "Grafos", "TC"), sum)
View(abaco)
abaco = df_alunos_cc %>% group_by(Matricula, Periodo) %>%
summarise_at(c("P1", "P2", "LP1", "IC", "LP2", "Discreta", "Eda", "Leda", "GI", "Grafos", "TC"), sum)
View(abaco)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(bnlearn, quietly = TRUE)
require(tidyr)
require(reshape2, quietly = TRUE)
library(knitr, quietly = TRUE)
library(reshape2, quietly = TRUE)
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(bnlearn, quietly = TRUE)
require(tidyr)
require(reshape2, quietly = TRUE)
library(knitr, quietly = TRUE)
library(reshape2, quietly = TRUE)
ler_dados = function(arquivo){
require("dplyr", warn.conflicts = FALSE)
file = read.csv(arquivo, stringsAsFactors = TRUE, encoding='UTF-8')
return (file)
}
df_alunos_cc = ler_dados("alunos_notas_simplif.csv")
## 200 significa que o cara tirou 0 (uma forma de diferenciar do 0 que substitui NA)
abaco = ler_dados("abaco.csv")
classifica_linha <- function(linha){
#se a média foi algum dos valores dessa lista, então reprovou
notas_reprovacao = c(1:49, 200)
periodo <- linha[3]
if (periodo == 1){
P1 <- linha[4]
LP1 <- linha[6]
IC <- linha[7]
if (P1 %in% notas_reprovacao ||
LP1 %in% notas_reprovacao ||
IC %in% notas_reprovacao){
return ("Reprovado")
} else {
return("Aprovado")
}
} else if (periodo == 2){
P2 <- linha[5]
LP2 <- linha[8]
Discreta <- linha[9]
Grafos <- linha[12]
if (P2 %in% notas_reprovacao ||
LP2 %in% notas_reprovacao ||
Discreta %in% notas_reprovacao ||
Grafos %in% notas_reprovacao){
return ("Reprovado")
} else {
return("Aprovado")
}
} else {
EDA <- linha[10]
LEDA <- linha[11]
TC <- linha[13]
if (EDA %in% notas_reprovacao ||
LEDA %in% notas_reprovacao ||
TC %in% notas_reprovacao){
return ("Reprovado")
} else {
return("Aprovado")
}
}
}
abaco$Situacao <- abaco$Periodo
for(i in 1:nrow(abaco)) {
row <- abaco[i,]
classificacao <- classifica_linha(row)
abaco$Situacao[i] <- classificacao
}
View(abaco)
## Dados para o modelo Caxalau.
col_names = colnames(abaco)
abaco[, col_names] = lapply(abaco[, col_names], factor)
## Dados para o modelo simples gerado pelo R.
cc_notas_simplificadas = df_alunos_cc
col_names_simp = colnames(cc_notas_simplificadas)
cc_notas_simplificadas[, col_names_simp] = lapply(cc_notas_simplificadas[, col_names_simp], factor)
#Hill climbing
res <- hc(as.data.frame(abaco))
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(bnlearn, quietly = TRUE)
require(tidyr)
require(reshape2, quietly = TRUE)
library(knitr, quietly = TRUE)
library(reshape2, quietly = TRUE)
#Hill climbing
res <- hc(as.data.frame(abaco))
install.packages("bnlearn")
require(ggplot2, quietly = TRUE)
require(dplyr, quietly = TRUE)
require(bnlearn, quietly = TRUE)
require(tidyr)
require(reshape2, quietly = TRUE)
library(knitr, quietly = TRUE)
library(reshape2, quietly = TRUE)
#Hill climbing
res <- hc(as.data.frame(abaco))
relations = res$arcs
plot(res)
relations = rbind(relations,
c("Leda", "Situacao"),
c("TC", "Situacao"),
c("Eda", "Situacao"),
c("Grafos", "Situacao"),
c("LP1", "Situacao"),
c("P2", "Situacao"),
c("LP2", "Situacao"),
c("P1", "P2"),
c("LP1", "P2"),
c("IC", "P2"),
c("P1", "LP2"),
c("LP1", "LP2"),
c("IC", "LP2"),
c("P1", "Grafos"),
c("LP1", "Grafos"),
c("IC", "Leda"),
c("P1", "Leda"),
c("LP1", "Leda"),
c("Grafos", "Eda"),
c("P2", "Eda"),
c("LP2", "Eda"),
c("Discreta", "TC"),
c("IC", "TC"),
c("Grafos", "TC")
)
res$arcs = relations
plot(res)
disciplinas_primeiro_periodo = c("1411174", "1411180", "1411167", "P1", "LP1", "IC")
disciplinas_segundo_periodo = c("1109113", "1411168", "1411181", "1411170", "P2", "LP2", "Discreta", "Grafos")
disciplinas_terceiro_periodo = c("1411179", "1411171", "1411172", "Eda", "Leda", "TC")
res_modelo_simples <- hc(cc_notas_simplificadas)
# Gerando modelo simples.
fittedbn <- bn.fit(res_modelo_simples, data = cc_notas_simplificadas, method="mle")
# Probabilidade de a situacao ser reprovado, dado que as disciplins são apenas as do primeiro periodo.
prob_reprovar_1st_per_simples = cpquery(fittedbn,
event = (Situacao == "Reprovado"),
evidence = (Cod_Disciplina %in% disciplinas_primeiro_periodo))
# Probabilidade de a situacao ser reprovado, dado que as disciplins são apenas as do segundo periodo.
prob_reprovar_2nd_per_simples = cpquery(fittedbn,
event = (Situacao == "Reprovado"),
evidence = (Cod_Disciplina %in% disciplinas_segundo_periodo))
# Probabilidade de a situacao ser reprovado, dado que as disciplins são apenas as do terceiro periodo.
prob_reprovar_3rd_per_simples = cpquery(fittedbn,
event = (Situacao == "Reprovado"),
evidence = (Cod_Disciplina %in% disciplinas_terceiro_periodo))
probs <- c(prob_reprovar_1st_per_simples, prob_reprovar_2nd_per_simples, prob_reprovar_3rd_per_simples)
periodos <- c("1 periodo", "2 periodo", "3 periodo")
result.modelo.simples <- data.frame(periodos, probs)
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") + scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3)
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) + theme(legend.key=element_blank())
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) + theme_set(theme_bw() + theme(legend.key=element_blank()))
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) + theme(legend.background=element_blank())
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) +
theme(legend.background=element_blank(),
legend.box.background = element_blank())
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) +
theme(legend.background=element_blank(),
legend.key = element_blank())
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacão - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) +
theme(legend.background=element_blank(),
line = element_blank())
ggplot(data=result.modelo.simples, aes(x=periodos, y=probs)) + ggtitle("Probabilidades de reprovacÃ£o - Modelo simples") +
geom_bar(stat="identity", fill="#FF9999", colour="black") +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label=probs), vjust=-0.3) +
theme(legend.background=element_blank(),
line = element_blank())
